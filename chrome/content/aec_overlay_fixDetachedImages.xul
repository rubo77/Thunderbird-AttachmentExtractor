<?xml version="1.0" encoding="UTF-8"?>
<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is AttachmentExtractor.
   -
   - The Initial Developer of the Original Code is
   - Andrew Williamson <eviljeff@eviljeff.com>.
   - Portions created by the Initial Developer are Copyright (C) 2009
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   - Alexander Ihrig
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->
<!DOCTYPE overlay >

<overlay id="fixDetachedImages-AE"
         xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

<script type="application/x-javascript">
<![CDATA[

	var fixDetachedImages=function fixDetachedImages(aEvent) {
		if (!attachmentextractor.prefs.get("fixdetachedimages")) return;
		var messagePane=document.getElementById("messagepane");
		
		var messageMatches=messagePane.contentDocument.getElementsByTagName('IMG');
		// just include attachments not external images
		messageMatches = Array.prototype.filter.call(messageMatches,function (a) {return /^mailbox|imap/.test(a.src);});
		//aedump(messageMatches.map(function (a) {return a.src+"\n";}));
		
		var attachments = currentAttachments;/*document.getElementById('attachmentList').children;
		attachments=Array.prototype.map.call(attachments,function (c) {return c.attachment;});*/
		// just concentrate on image attachments.
		attachments=attachments.filter(function (att) {return att.contentType.indexOf("image")==0;});
		//aedump(attachments.map(function (c) {return c.displayName+" : "+c.url+"\n";}));
		
		if (attachments.length==0 || messageMatches.length==0) return;
		attachments.reverse();
		messageMatches.reverse();
		
		var ioService = Components.classes["@mozilla.org/network/io-service;1"].getService(Components.interfaces.nsIIOService);
		var resProt = ioService.getProtocolHandler("resource").QueryInterface(Components.interfaces.nsIResProtocolHandler);
		var setResources=new Array();
		attachments.forEach(function (att,i,a) {
			if (!att.isExternalAttachment) return;
			var resourceName=encodeURIComponent("ae_"+att.displayName.toLowerCase());
			resProt.setSubstitution(resourceName, ioService.newURI(att.url, null, null));	
			messageMatches[i].src="resource://"+resourceName;
			aedump("substituted "+att.displayName+" with resource://"+resourceName+" > "+att.url+"\n",3);
			att.resource=messageMatches[i].src;
			setResources.push(resourceName);			
		});
		// create timeout to remove resources after we've finished with them - they're a security hole.
		setTimeout(function(prot,res) {res.forEach(function(r){prot.setSubstitution(r,null);});},1000,resProt,setResources);
		if (typeof messagePaneOnResize == "function") setTimeout(messagePaneOnResize,500); //TB3 only
	}

	window.addEventListener('load', function() {
		document.getElementById("messagepane").addEventListener("load", fixDetachedImages, true);
		window.removeEventListener('load',arguments.callee,true);
	}, true);
]]>
</script>

</overlay>



